#!/usr/bin/env php
<?php

/**************************************************************************************************************
*                                                                                                             *
*                                         HERE BE DRAGONS                                                     *
*                                                                                                             *
**************************************************************************************************************/

$confVersion  = "2015-12-09-1";


# Include the le2ispc config
require_once('/root/.le2ispc/le2ispc.conf.php');
# Check if the versions are identical
if ( $version != $confVersion ) {
    echo "The config file was altered.
Please update your config file at /root/.le2ispc/le2ispc.conf.php
to the current version located at https://github.com/sjau/le2ispc/blob/master/le2ispc.conf.php";
    exit;
}



# Include ISPConfig config file for DB connection
require_once('/usr/local/ispconfig/server/lib/config.inc.php');



# Check valid call
$USAGE = "Usage: $argv[0] [-n|--dry-run] domain.tld [sub.domain.tld ...]\n";

if (count($argv) < 1) {
     echo $USAGE;
     exit(1);
}



# Get first arg
$dry_run = false;
$arg = array_shift($argv);
$arg = array_shift($argv);
if($arg == '-n' || $arg == '--dry-run') {
    $dry_run = true;
    $arg = array_shift($argv);
}



# Get the domain
echo "1. Get the domain name.\n";
$domain = $arg;
$subdomains = $argv;



# Query the MySQL DB Directly whether $domain is a vhost
echo "2. Query MySQL whether it's a vhost.\n";
try {
    $db = new PDO('mysql:host=' . $conf['db_host'] . ';dbname=' . $conf['db_database'], $conf['db_user'], $conf['db_password']);
}
catch (PDOException $e) {
    echo "There was an unexpected error. Couldn't connect to the DB.";
}
$stmt = $db->prepare("SELECT * FROM `web_domain` WHERE `domain` LIKE ? AND `type` LIKE 'vhost%'");
$stmt->execute(array($domain));
$count = $stmt->rowCount();
if ($count != 1) {
    echo "Domain name '$domain' could not be found in the ISPC DB. Please try again.";
    exit;
}
$row = $stmt->fetchAll(PDO::FETCH_ASSOC);
$domainInfo = $row[0];
# Set two vars that are required for Soap Connection
$domain_id = $domainInfo['domain_id'];
$server_id = $domainInfo['server_id'];



# Check if ther's a 'www' subdomain set
$www_subdomain = 'www.' . $domain;
if (in_array($domainInfo['subdomain'], array('www','*')) && !in_array($www_subdomain, $subdomains)) {
    $domains = "-d '$domain' -d 'www.$domain'";
} else {
    $domains = "-d '$domain'";
}



# Add subdomains to domain list
foreach ($subdomains as $subdomain) {
    $domains .= " -d '$subdomain'";
}



# Make sure webroot authentication works for both
echo "3. Prepare Server for webroot authentication.\n";
# https://letsencrypt.readthedocs.org/en/latest/api/plugins/webroot.html?highlight=webroot#module-letsencrypt.plugins.webroot
if ( $server['type'] == 'apache' ) {
    $confFile='/etc/apache2/conf-available/letsencrypt-webroot.conf';
    if ( ! file_exists($confFile) && is_dir('/etc/apache2/conf-available/') ) {
        $file = fopen($confFile, "w") or die("Unable to open file!");
        $txt = '
            <IfModule mod_headers.c>
                <LocationMatch "/.well-known/acme-challenge/*">
                    Header set Content-Type "text/plain"
                </LocationMatch>
            </IfModule>
        ';
        fwrite($file, $txt);
        fclose($file);
        shell_exec("a2enmod headers rewrite");
        shell_exec("a2enconf letsencrypt-webroot.conf");
        shell_exec("systemctl reload apache2");
        sleep(5);
    }
} elseif ($server['type'] == 'nginx' ) {
    if (strpos($domainInfo['nginx_directives'], '<LocationMatch "/.well-known/acme-challenge/*">') === false) {
        # No acme-challenge rule detected, so lets add it
        $txt = '
            location ~ /.well-known/acme-challenge/(.*) {
                default_type text/plain;
            }
            ' . $domainInfo['nginx_directives'];
        $client = newSoapConnection ($server);
        $params = loadDomainData ($server, $client, $domain_id);
        # Update params array with new directives
        $params['nginx_directives'] = $txt;
        # Store altered data in ISPC
        saveDomainData ($server, $client, $server_id, $domain_id, $params);
        closeSoapConnection ($server, $client);
        # ISPC cron runs every minute, so sleep for 60 seconds.... annoying but only required if directives haven't been added yet for acme-challenge
        sleep(60);
    }
} else {
    echo "No valid server setting in the configuration. Please fix.";
    exit;
}



# Create ~/.well-known/acme-challenge folders and set correct permissions
echo "4. Create folder in web root for acme-challenge\n";
$webroot = $domainInfo['document_root'] . ($domainInfo['web_folder']!=''?"/".$domainInfo['web_folder']:"/web");
@mkdir("$webroot/.well-known/acme-challenge", 0777, true);
chmod("$webroot/.well-known", 0777);
chmod("$webroot/.well-known/acme-challenge", 0777);



# Disable temporarily the .htaccess file in webroot
    echo "5. Disable temporarily the .htaccess file in webroot (apache only).\n";
if($server['type'] == 'apache' && $server["htaccess"] == 'y') {
    $curTime=time();
    @rename("$webroot/.htaccess", "$webroot/.htaccess-$curTime-letsencrypt");
}



# Run letsencrypt to create the certs;  --agree-eula is on current git (no Beta Testing) not required
echo "6. Run Let's Encrypt Tool\n";
if($domainInfo['redirect_type'] == "L") {
    $webroot .= $domainInfo['redirect_path'];
}

$command = "$letsencrypt --text --agree-tos --renew-by-default --rsa-key-size 4096 --email '$email' $domains -a webroot --webroot-path " . $webroot . " certonly";
if ($dry_run) {
    echo $command;
    echo "\nNothing executed (dry-run)\n";
    # Restore .htaccess
    if($server['type'] == 'apache' && $server["htaccess"] == 'y') {
        @rename("$webroot/.htaccess-$curTime-letsencrypt", "$webroot/.htaccess");
    }
    exit;
}
$output = shell_exec($command);

if (strpos($output, 'Congratulations') === false) {
    echo "Sorry, there was some error. Please check:\n";
    echo $output;
    # Restore .htacess
    if($server['type'] == 'apache' && $server["htaccess"] == 'y') {
        @rename("$webroot/.htaccess-$curTime-letsencrypt", "$webroot/.htaccess");
    }
    exit;
}



# Restore .htaccess again
echo "7. Restore .htaccess again (apache only).\n";
if($server['type'] == 'apache' && $server["htaccess"] == 'y') {
    @rename("$webroot/.htaccess-$curTime-letsencrypt", "$webroot/.htaccess");
}



# Read the SSL info into vars
echo "8. Read SSL info into vars.\n";
$cert     = file_get_contents('/etc/letsencrypt/live/' . $domain . '/cert.pem');
$privkey  = file_get_contents('/etc/letsencrypt/live/' . $domain . '/privkey.pem');
$bundle   = file_get_contents('/etc/letsencrypt/live/' . $domain . '/chain.pem');



# Insert SSL info via API
echo "9. Insert SSL info via API.\n";
$client = newSoapConnection ($server);
$params = loadDomainData ($server, $client, $domain_id);
# Update params array with new directives
$params['ssl']          = 'y';
$params['ssl_domain']   = $domain;
$params['ssl_key']      = $privkey;
$params['ssl_cert']     = $cert;
$params['ssl_bundle']   = $bundle;
$params['ssl_action']   = 'save';
# Forced ssl redirect
if ( $server['type'] == 'apache' && $forceSSL == 'y' ) {
    # Check if the apache directives already contain forced rewrite
    if (strpos($params['apache_directives'], 'RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI}') === false) {
        # No rewrite rules detected, so lets add it
        $params['apache_directives'] = "
            RewriteEngine On
            RewriteCond %{HTTPS} off
            RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]
            "
            . $params['apache_directives'];
    }
} elseif ( $server['type'] == 'nginx' && $forceSSL == 'y' ) {
    if (strpos($params['nginx_directives'], 'if ($scheme = http) {') === false) {
        # No rewrite rules detected, so lets add it
        $params['nginx_directives'] = '
            if ($scheme = http) {
                return 301 https://$server_name$request_uri;
            }
            '
            . $params['nginx_directives'];
    }
}
# Store altered data in ISPC
saveDomainData ($server, $client, $server_id, $domain_id, $params);
closeSoapConnection ($server, $client);
echo "Done.\n";






# Functions for making Soap Connection, fetching and storing domain data
function newSoapConnection ($server) {
    $client = new SoapClient(
        null,
        array(
            'location' => $server['soap_uri'] . 'index.php',
            'uri'      => $server['soap_uri'],
            'trace' => 1,
            'stream_context'=> stream_context_create(
            array(
                'ssl'=> array(
                    'verify_peer'=>false,
                    'verify_peer_name'=>false
                )
            )
        ),
        'exceptions' => 1
        )
    );
    return($client);
}



function loadDomainData ($server, $client, $domain_id) {
  global $domainInfo;
    $session_id = $client->login($server['username'], $server['password']);
    if ($domainInfo['type']=='vhost') {
      $params = $client->sites_web_domain_get($session_id, $domain_id);
    }
    elseif($domainInfo['type']=='vhostsubdomain') {
      $params = $client->sites_web_subdomain_get($session_id, $domain_id);
    }
    return($params);
}



function saveDomainData ($server, $client, $server_id, $domain_id, $params) {
  global $domainInfo;
    $session_id = $client->login($server['username'], $server['password']);
    if ($domainInfo['type']=='vhost') {
      $params = $client->sites_web_domain_update($session_id, $server_id, $domain_id, $params);
    }
    elseif($domainInfo['type']=='vhostsubdomain') {
      $params = $client->sites_web_vhost_subdomain_update($session_id, $server_id, $domain_id, $params);
    }
}



function closeSoapConnection ($server, $client) {
    $session_id = $client->login($server['username'], $server['password']);
    $client->logout($session_id);
}

?>
